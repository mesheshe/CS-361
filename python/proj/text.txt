def indexFunctin(self, index)
    if index < 0 or index >= self.size:
        raise Exception
    curr = self.frontsentinel.next
    i = 0
    while i != index and curr != self.backsentinel:
        curr = curr.next
        i += 1
    if curr == self.backsentinel:
        return False
    else:
        return curr.value


add_front and remove_front will always take O(n) worst case
add_back and remove_back will take amortized O(1) if resize must be done
The lack of ability to wrap the array itself is what will add significant downtime 
because if we can wrap our list then we can have amortized O(1) all the way around 
and get close to the performance of linked list which have all O(1) if you have references 
to the front and back.
append adds to the end of the list but if we have our data structure wrap
it fails.

p.next.next

q.next
q.next.prev.next

if self._size == self._capacity
logical index 0 from old one gets moved to new physical index 0 and so on

stack or queue 
stack can only enter and exit from the same place which does not make 
sense for this situation. You can't automatically the old without first 
moving the new out of the way first
A deque works better since you want to remove the place where you just 
stored your new action. Bc undo does the undoing on the most recent action, '
and therefore if we want to get to a previous state, which just pull up 
the most recent action we have stored in our deque
Also as we do more than 20 actions, the old actions get phased out of the 
list slowly while the new ones get added to the back.

DynamicArray allows us for direct indexing while LinkedList will force us 
to iterate through them one by one for a total of n iterations to get the nth
index


DA Bag
Add: amortized O(1)
contains: O(n)
remove: O(n)
LL Bag
Add: If SLL then O(n) but if dll with sentinel O(1)
Contains: O(n)
remove: O(n)
Ordered Array Bag
add:    log n + O(n) = O(n)
Contains: O(log n)
Remove: log n +  O(n) = O(n)

def orderedSearch(self, value):
    currNode = self.head
    while currNode is not None and currNode.data < value:
        currNode = currNode.next
    if currNode is None or currNode.data != value:
        return False
    return currNode is not None 


class DynamicArrayException(Exception):

    """

    Custom exception class to be used by Dynamic Array

    DO NOT CHANGE THIS CLASS IN ANY WAY

    """

    pass
class DynamicArray:
    
    def __init__(self, start_array=None):
    
        """
    
        Initialize new dynamic array
    
        DO NOT CHANGE THIS METHOD IN ANY WAY
    
        """
    
        self.size = 0
    
        self.capacity = 4
    
        self.first = 0  # do not use / change this value
    
        self.data = StaticArray(self.capacity)


        # populate dynamic array with initial values (if provided)
    
        # before using this feature, implement append() method
    
        if start_array is not None:
    
            for value in start_array:
    
                self.append(value)
    

    def dynArrayAddAt(self, index: int, value: object) -> None:
    
        """
    
        TODO: Write this implementation
    
        """
        if index < 0 or index > self.size():
            raise DynamicArrayException
        
        if self.size == self.capacity:
            new_data = StaticArray(self.size*2)
            for i in range(self.size):
                new_data[i] = self.data[i]
            self.data = new_data
        
        for i in range(self.size, index, -1):
            self.data[i] = self.data[i - 1]  # creates the hole
        
        self.data[index] = value 
        self.size += 1
        return



