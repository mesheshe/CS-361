import java.util.*;

public class HangmanManager {
    private Set<String> wordBank;                      // list of words to pick from
    private Set<Character> letterGuessed;              // holds the letters guessed
    private Map<String, Set<String>> mapWord;          // maps the pattern to list of words that fit in that set
    private int numOfGuesses;                         // num of guesses

    HangmanManager(Collection<String> dictionary, int length, int max){
        if(length < 1 || max < 0){
            throw new IllegalArgumentException();
        }
        numOfGuesses = max;
        letterGuessed = new TreeSet<>();
        wordBank = new TreeSet<>();
        for (String w: dictionary){
            if (w.length() == length){wordBank.add(w);}
        }
        String dashes = "-";
        int num = 1;
        while(num != length){
            dashes += " -";
            num++;
        }
        mapWord = new TreeMap<>();
        mapWord.put(dashes, new TreeSet<>());
    }

    public Set<String> words(){
        return wordBank;
    }

    public int guessesLeft(){
        return numOfGuesses;
    }

    public Set<Character> guesses(){
        return letterGuessed;
    }

    public String pattern(){
        if (mapWord.size() == 1){
            Set<String> tempSet = mapWord.keySet();
            Iterator<String> itt = tempSet.iterator();
            return itt.next();
        }else{
            for (String word: mapWord.keySet()){
                if (mapWord.get(word).size() == wordBank.size()){
                    if (mapWord.get(word).containsAll(wordBank)){
                        return word;
                    }
                }
            }
            return null;
        }
    }

    public int record(char guess){
        if (guessesLeft() < 1 || wordBank.isEmpty()){throw new IllegalStateException();
        }else if(letterGuessed.contains(guess)){throw new IllegalArgumentException();}
        mapWord = createNewMap(guess);
        int count = 0;
        String returnPattern = "";
        for(String pattern: mapWord.keySet()){
            if (mapWord.get(pattern).size() > count){
                wordBank = mapWord.get(pattern);
                returnPattern = pattern;
                count = wordBank.size();
            }
        }
        count = 0;  // reusing count to now hold the number of times a char guess is present in string
        for (int i = 0; i < returnPattern.length(); i++){
            if (returnPattern.charAt(i) == guess){count++;}
        }
        if (count == 0){numOfGuesses--;}
        letterGuessed.add(guess);        
        return count;
    }

    private Map<String, Set<String>> createNewMap(char guess){
        String oldPattern = pattern();
        Map<String, Set<String>> newMap = new TreeMap<>();
        for (String word: wordBank){
            String newPattern = getNewPattern(oldPattern, word, guess);
            addToMap(newMap, newPattern, word);
        }
        return newMap;
    }

    private void addToMap(Map<String, Set<String>> newMap, String pattern, String word){
        if(!newMap.containsKey(pattern)){
            newMap.put(pattern, new TreeSet<>());
        }
        newMap.get(pattern).add(word);
    }

    private String getNewPattern(String old, String word, char target){
        for (int i = 0; i < word.length(); i++){
            if (word.toLowerCase().charAt(i) == target){
                int newIndex = 2*i;
                if (newIndex == 0){
                    old = target + old.substring(1);
                }else if (newIndex == old.length() - 1){
                    old = old.substring(0, old.length() - 1) + target;
                }else{
                    String str1 = old.substring(0, newIndex);
                    String str2 = old.substring(newIndex + 1);
                    old = str1 + target + str2;
                }
            }
        }
        return old;
    }

}
